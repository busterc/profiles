#!/bin/bash

# INTENDED FOR: OSX, LINUX & MSYS

# Prompt display
export PROMPTERTYPE=short
function prompter(){
	local _ps1=""
	if [ $# -gt 0 ]; then
		export PROMPTERTYPE="$1"
	fi

	local status="$(git status 2>/dev/null)"
	local git=""
	local branch="$(echo "$status" | awk '/On branch/ {print $3}')"

	if [ "$branch" != "" ]; then
		local flags="$(
			echo "$status" | awk 'BEGIN {r=""} \
				/^Changes to be committed:$/        {r=r "+"}\
				/^Changes not staged for commit:$/  {r=r "!"}\
				/^Untracked files:$/                {r=r "?"}\
				END {print r}'
		)"
		git=" [$branch$flags]"
	fi

	case "$PROMPTERTYPE" in
	long)
		_ps1="\u @$(hostname -s) in \$PWD"$git
		;;
	short)
		_ps1="`pwd | sed "s#$HOME#~#"`"$git
		;;
	z)
		_ps1="`pwd | sed "s#$HOME#~#" | sed "s#\(/.\)\([^\/]*\)#\1#g"`"$git
		;;
	$)
		# just use _ps1="$ "
		_ps1=$git
		;;
	esac

	PS1="$(hr)$(tput rev)$_ps1$(tput sgr0)\n$ " ; export PS1
}
export PROMPT_COMMAND=prompter

# Prep ~/bin
mkdir -p "$HOME/bin"
export PATH="$HOME/bin:$PATH"

# ActivePerl & PPM (perl package manager)
export PATH="/usr/local/ActivePerl-5.16/bin:$PATH"

# ImageMagick
export MAGICK_HOME="$HOME/bin/ImageMagick-6.8.9"
export PATH="$MAGICK_HOME/bin:$PATH"
export DYLD_LIBRARY_PATH="$MAGICK_HOME/lib/"

# Easy navigation
alias cdd="cdl -"
alias ~="cdl ~"
alias ..="cdl .."
alias ...="cdl ../.."
alias ....="cdl ../../.."
alias .....="cdl ../../../.."

# Shortcuts
alias dl="cdl ~/Downloads"
alias dt="cdl ~/Desktop"
mkdir -p ~/Screenshots
alias sss="cdl ~/Screenshots"

# List all files colorized in long format
alias l="ls -l"

# List all files colorized in long format, including dot files
alias la="ls -la"

# List only directories
alias lsd='ls -l | grep "^d"'

# List only dotfiles
alias lds='ls -lad .*'

# List only directories, including dot files
alias lsda='ls -la | grep "^d"'

# Remove directory
alias rd="rm -rf"

# Run Makefiles quietly
alias makes="make -s"

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# Change directory and list contents
function cdl() {
	cd "$@" && la
}

# Lazy change directory and list contents
function cdz() {
	local ds=$(find "$@"* -maxdepth 0 -type d | wc -l)
	if [[ $ds -eq 1 ]]; then
		cdl $(find "$@"* -maxdepth 0 -type d)
	else
		printf "\nTOO LAZY\n========\n"
		find "$@"* -maxdepth 0 -type d
		printf "\n"
	fi
}

# Lazier change directory and list contents
function cz() {
	local d="`echo $1 | sed "s#/#*\/#g"`*"
	local ds=$(find $d -type d | wc -l)

	if [[ $ds -eq 1 ]]; then
		cdl $d
	else
		printf "\nTOO LAZY\n========\n"
		find $d -type d | less
		printf "\n"
	fi
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Open Editor
function e() {
	if [ "$1" = "" ]; then
		eval $EDITOR . &
	else
		eval $EDITOR "$1" &
	fi
}

# Open .profiles in Editor
function profiles() {
	e ~/.profiles
}

# List aliases that match regexp, e.g. $ alls .*sudo.*
function alls() {
	alias -p | sed -n "/^alias $1/p"
}

# List functions that match regexp, e.g. $ fnls .*c.*
function fnls() {
	declare -F | sed -n "/^declare -f $1/p" | sed "s#declare -f ##g"
}

# ImageMagick FavIcon Generator
function favicon() {
	if [[ $# -eq 0 ]]; then
		echo "  usage: $0 <image-filename>"
	else
		convert "$1" -bordercolor white -border 0 \
			\( -clone 0 -resize 16x16 \) \
			\( -clone 0 -resize 32x32 \) \
			\( -clone 0 -resize 48x48 \) \
			\( -clone 0 -resize 64x64 \) \
			-delete 0 -alpha off -colors 256 favicon.ico
	fi
}

# Generate a stubbed Bash file
function gen-bash() {
	if [[ $# -eq 0 ]]; then
		echo "  usage: gen-bash <scriptname>"
		echo "    <scriptname>: no .sh extension required"
	else
		local bashfile="$1.sh"
		printf "#!/bin/bash\n# $1\n\n" > $bashfile
		chmod +x $bashfile
		e $bashfile
	fi
}

# HR for terminal, see also: https://github.com/LuRsT/hr
function hr() {
	local COLS="$(tput cols)"
	if (( COLS <= 0 )) ; then
		COLS="${COLUMNS:-80}"
	fi

	local WORD="$1"
	if [[ -z "$WORD" ]] ; then
		WORD="_"
	fi

	local LINE=''
	while (( ${#LINE} < COLS ))
	do
		LINE="$LINE$WORD"
	done
	echo "${LINE:0:$COLS}"
}
