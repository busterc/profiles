#!/usr/bin/env bash

# OSX _profile

# Load bash completions
export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

function source_profile_osx() {
  # cope with spaces in file/directory names
  local IFS_backup="$IFS"
  IFS=$'\n'

  local sources=($(dirname "${BASH_SOURCE[0]}")/../osx/sources/*)
  for s in "${sources[@]}"; do
    source "$s"
  done

  IFS="$IFS_backup"
}
source_profile_osx

# homebrew related
export PATH="/usr/local/sbin:$PATH"
alias brew-outdated="brew outdated --verbose | sed 's#[<()]##g; s#\S*, ##g' | column -t"
alias bro="brew-outdated"
alias brew-upgrade="brew outdated | ipt -m -M 'Select Packages to Upgrade:' | xargs brew upgrade"
alias bru="brew-upgrade"
alias cask-outdated="brew cask outdated --verbose | sed 's#[!=<()]##g; s#\S*, ##g' | column -t"
alias cask-upgrade="brew cask outdated | ipt -m -M 'Select Packages to Upgrade:' | xargs brew cask upgrade"

# remove last newline when using `pbcopy`
alias npbcopy="tr -d '\n$' | pbcopy"

# pbpaste (no need to tab)
alias pbp="pbpaste"

# quick pbcopy
function pbc() {
  echo "$@" | pbcopy
}

# quickly append pbcopy
function pba() {
  local archive="$(pbpaste)"
  echo "$archive $@" | pbcopy
}

# PlistBuddy for plist file editing
alias PlistBuddy="/usr/libexec/PlistBuddy"
alias plistbuddy="PlistBuddy"

# Application directories
export APPLICATIONS_DIR="/Applications"
export USER_APPLICATIONS_DIR="$HOME/Applications"
alias aapps="find $APPLICATIONS_DIR -regex '.*.app' | sed s#$APPLICATIONS_DIR/## | less -P '^ Apps in $APPLICATIONS_DIR'"
alias uapps="find $USER_APPLICATIONS_DIR -regex '.*.app' | sed s#$USER_APPLICATIONS_DIR/## | less -P '^ Apps in $USER_APPLICATIONS_DIR'"
alias apps="aapps && uapps"

# VSCode as editor, when possible
export EDITOR="code"

# TextEdit (when desperate)
alias textedit='open -a TextEdit'

# Chrome browser from CLI
alias chrome="open -a $APPLICATIONS_DIR/Google\ Chrome.app"

# Surfraw
export SURFRAW_text_browser=lynx

# Terminal Colors
export CLICOLOR="cxfxcxdxbxegedabagacad"
export LSCOLORS="cxfxcxdxbxegedabagacad"

# start iOS simulator from terminal
alias ios="open /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Applications/iPhone\ Simulator.app"

# Show/hide HIDDEN files in Finder/Desktop
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
# Show/hide ALL files in Finder/Desktop
alias veil="defaults write com.apple.finder CreateDesktop false && killall Finder"
alias unveil="defaults write com.apple.finder CreateDesktop true && killall Finder"

# Open finder to Sublime Snippets
alias snippets="open ~/Library/Application\ Support/Sublime\ Text\ 2/Packages/User"

# Open finder to system Fonts
alias fonts="open /Library/Fonts"

# Clear terminal screen and remove backscroll
alias cl="clear && printf '\e[3J'"

# Open a new Terminal (Tab or Window) & run passed commands
function term() {
  case $2 in
  "")
    osascript -e "
        tell application \"System Events\" to tell process \"Terminal\" to keystroke \"$1\" using command down
        tell application \"Terminal\" to do script \"cd \\\"$(PWD)\\\" && clear\" in selected tab of the front window
    " > /dev/null 2>&1
    ;;
  *)
    osascript -e "
        tell application \"System Events\" to tell process \"Terminal\" to keystroke \"$1\" using command down
        tell application \"Terminal\" to do script \"cd \\\"$(PWD)\\\" && clear\" in selected tab of the front window
        tell application \"Terminal\" to do script \"$2\" in selected tab of the front window
    " > /dev/null 2>&1
  esac
}

# Open new Terminal Tab
function tab() {
  term t "$1"
}

# Open new Terminal Tab and Close Current Tab
function tabx() {
  term t "$1"
  exit
}

# Open new Terminal Window
function window() {
  term n "$1"
}

# Run NPM HTTP-Server and open Chrome
function serve() {
  local port=${*-8080}
  tab "http-server -p $port -c-1"
  chrome "http://$(hostname):$port"
}
