#!/usr/bin/env bash

# Git aliases
## add
alias gta="git add"
alias gtap="git add -p"
## branch
alias gtb="git branch"
alias gtbd="git branch -D"
alias gtbl="git branch --list"
## clone
alias gtc="git clone"
## checkout
alias gtch="git checkout"
alias gtchb="git checkout -b"
## commit
alias gtco="git commit"
## diff
alias gtd="git diff"
alias gtdmom="git fetch origin && git diff origin/master master"
alias gtdfmom="git fetch origin && git diff --name-only origin/master master"
alias gtdup="git fetch upstream && git diff master upstream/master"
## fetch
alias gtf="git fetch"
## init
alias gti="git init"
## log
alias gtlog="git log --graph --oneline --decorate --all"
## push
alias gtp="git push && git push --tags"
alias gtpuo="git push -u origin --all && git push origin --tags"
alias gtpom="git push origin master"
## remote
alias gtrev="git remote -v"
## status
alias gts="git status"
## clean/remove ignored files/folders
alias gtclean="git clean -Xdf"
## dry-run clean/remove ignored files/folders
alias gtclean-dryrun="git clean -Xdfn"
alias gtcleand="gtclean-dryrun"


# Rebase Workflow = gtur then gtpomm
alias gtur="git fetch upstream && git rebase upstream/master"
alias gtpomm="git push origin +master:master"

# GitHub Public API Rate Limit
alias ghrate="curl -s https://api.github.com/rate_limit"

# Easy peasy git tagging
function gtag() {
  if [[ $# -eq 0 ]]; then
    git tag
  else
    git tag -a "$@" -m "$@"
  fi
}

# Git tag with datetimestamp
function gtagdate() {
  gtag $(date +"%Y.%m.%d-%H%M%S")
}

# GitHub upstreaming
function upstreamhub() {
  if [[ $# -eq 0 ]]; then
    cat <<EOF
Usage: upstreamhub <organization|username>

  Description:
    Set the GitHub upstream for the current repo, by passing
    an organization or username

EOF
  else
    echo "$PWD" | sed 's#.*\/##' | xargs -I '{}' git remote add upstream git@github.com:"$1"/{}
  fi
}

# GitHub aliases
function ghc() {
  git clone git@github.com:"$1"
}
function ghcbc() {
  git clone git@github.com:busterc/"$1"
}
function ghcus() {
  git clone git@github.com:UserStyles/"$1"
}
function ghchj() {
  git clone git@github.com:HyperJSON/"$1"
}

# Setup GitHub remote repo and push for the first time
function repo-ghbc() {
  # todo: curl github to create the repo
  git remote add origin "git@github.com:busterc/$(basename $PWD).git"
  git push -u origin --all
  git push origin --tags
}

# Setup BitBucket remote repo and push for the first time
function repo-bbbc() {
  # todo: curl bitbucket to create the repo
  git remote add origin "git@bitbucket.org:busterc/$(basename $PWD).git"
  git push -u origin --all
  git push origin --tags
}

# BitBucket aliases

function bbc() {
  git clone git@bitbucket.org:"$1"
}
function bbcbc() {
  git clone git@bitbucket.org:busterc/"$1"
}

# Git Power Functions

# Run Git-Diff on Orign/Master for all immediate subdirectories
function gtdmoms() {
  for d in $(find . -name ".git" -maxdepth 2); do
  hr
  (
    cd "$d"/..
    echo "processing $d" | sed 's#\/\.git##';
    git fetch origin && git diff master origin/master
  )
  done
}

# Run Git-Clean all immediate subdirectories
function gtcleans() {
  for d in $(find . -name ".git" -maxdepth 2); do
  hr
  (
    cd "$d"/..
    echo "processing $d" | sed 's#\/\.git##';
    git clean -Xdf
  )
  done
}

# Run a Dryrun of Git-Clean all immediate subdirectories
function gtcleands() {
  for d in $(find . -name ".git" -maxdepth 2); do
  hr
  (
    cd "$d"/..
    echo "processing $d" | sed 's#\/\.git##';
    git clean -Xdfn
  )
  done
}

# Run Git-Diff on Upstream/Master for all immediate subdirectories
# todo: rename to gtdmums
function gtdups() {
  for d in $(find . -name ".git" -maxdepth 2); do
  hr
  (
    cd "$d"/..
    echo "processing $d" | sed 's#\/\.git##';
    git fetch upstream && git diff master upstream/master
  )
  done
}

# Run Git-Status on all immediate subdirectories
function gtss() {
  for d in $(find . -name ".git" -maxdepth 2); do
  hr
  (
    cd "$d"/..
    echo "processing $d" | sed 's#\/\.git##';
    git status
  )
  done
}

# Run Git Pull on all immediate subdirectories
function gtps() {
  for d in $(find . -name ".git" -maxdepth 2); do
  hr
  (
    cd "$d"/..
    echo "processing $d" | sed 's#\/\.git##';
    git pull
  )
  done
}

# Reuse a git repo for new project
function regit() {
  if [[ $# -ne 2 ]]; then
    cat <<EOF

  Re-use a git repo for a new project.

  Usage: regit <repo> <dest>

EOF
  else
    git clone --depth 1 "$1" "$2" &&
    cd "$2" &&
    rm -rf .git &&
    git init
  fi
}

function regithub() {
  if [[ $# -ne 2 ]]; then
    cat <<EOF

  Re-use a git repo (from GitHub) for a new project.

  Usage: regithub <repo> <dest>

EOF
  else
    regit "git@github.com:$1" "$2"
  fi
}

function regitbucket() {
  if [[ $# -ne 2 ]]; then
    cat <<EOF

  Re-use a git repo (from BitBucket) for a new project.

  Usage: regitbucket <repo> <dest>

EOF
  else
    regit "git@bitbucket.org:$1" "$2"
  fi
}

# Get dist/**/* from a git repo
function gitdist() {
  if [[ $# -ne 2 ]]; then
    cat <<EOF

  Get dist/**/* from a git repo

  Usage: gitdist <repo> <dest>

EOF
  else
    temp_dir="$(mktemp -d)"
    git clone --depth 1 "$1" "$temp_dir" &&
    cp -r "$temp_dir/dist/" "$2" &&
    rm -rf "$temp_dir"
  fi
}

#####################
#  THE DANGER ZONE  #
#####################

# Caution: this is destructive, no turning back
# GitHub RESET TO UPSTREAM
alias _gtreup="git fetch upstream && git checkout master && git reset --hard upstream/master && git push origin master --force"

# Caution: this is destructive, no turning back
# GitHub RESET TO UPSTREAM
function gtreup() {
  read -p "Are you sure? " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    _gtreup
  fi
}

# Caution: this is destructive, no turning back
# GitHub RESET TO UPSTREAM ON ALL IMMEDIATE SUBDIRECTORIES
function gtreups() {
  read -p "Are you sure? " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    for d in $(find . -name ".git" -maxdepth 2); do
    hr
    (
      cd "$d"/..
      echo "processing $d" | sed 's#\/\.git##';
      _gtreup
    )
    done
  fi
}

