#!/usr/bin/env bash

# X _profile

shopt -s direxpand

function source_profile_x() {
  # cope with spaces in file/directory names
  local IFS_backup="$IFS"
  IFS=$'\n'

  local sources=($(dirname "${BASH_SOURCE[0]}")/sources/*)
  for s in "${sources[@]}"; do
    source "$s"
  done

  IFS="$IFS_backup"
}
source_profile_x

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# Prompt display
export PROMPTERTYPE=short
function prompter(){
  local _ps1=""
  if [[ $# -gt 0 ]]; then
    export PROMPTERTYPE="$1"
  fi

  local sshd
  local git
  local status
  local branch

  sshd="$(ssh-add -l | awk 'BEGIN {r=""} \
    !/no identities/ {r="* "}\
    END {print r}
  ')"
  status="$(git status 2>/dev/null)"
  branch="$(echo "$status" | awk '/On branch/ {print $3}')"

  if [[ "$branch" != "" ]]; then
    local flags
    flags="$(
      echo "$status" | awk 'BEGIN {r=""} \
        /^Changes to be committed:$/        {r=r "+"}\
        /^Changes not staged for commit:$/  {r=r "!"}\
        /^Untracked files:$/                {r=r "?"}\
        END {print r}'
    )"
    git=" [$branch$flags]"
  fi

  case "$PROMPTERTYPE" in
  long)
    _ps1="\u @$(hostname -s) in \$PWD"$git
    ;;
  short)
    _ps1="$(pwd | sed "s#$HOME#~#")"$git
    ;;
  z)
    _ps1="$(pwd | sed "s#$HOME#~#" | sed "s#\(/.\)\([^\/]*\)#\1#g")"$git
    ;;
  $)
    # just use _ps1="$ "
    _ps1=$git
    ;;
  esac

  PS1="$(hr)$sshd$(tput rev)$_ps1$(tput sgr0)\n$ " ; export PS1
}
if [[ $- == *i* ]]; then
  # is an interactive shell
  export PROMPT_COMMAND=prompter
fi

# Prep ~/bin
mkdir -p "$HOME/bin"
export PATH="$HOME/bin:$PATH"
export b="$HOME/bin"

# SSH Key Caching
alias sshload="eval \"$(ssh-agent)\" > /dev/null && ssh-add"

# Reload profile
alias repro="source ~/.bash_profile"
alias mmm="repro"

# Erase the last command from history when chained, e.g.
# $ echo hiya; erase
function erase() {
  history -d $(history 1)
}

# Erase the last command from history
# $ echo hiya
# $ forget
function forget() {
  history -d $(history 1); history -d $(history 1)
}

# open editor with current directory
alias e.="e ."

# Easy navigation
alias cdd="cdl -"
alias ~="cdl ~"
alias ..="cdl .."
alias ...="cdl ../.."
alias ....="cdl ../../.."
alias .....="cdl ../../../.."

# Shortcuts
alias dl="cdl ~/Downloads"
alias dt="cdl ~/Desktop"
mkdir -p ~/Screenshots
alias ss="cdl ~/Screenshots"
mkdir -p ~/Github/busterc
alias gh="cdl ~/Github"
alias ghb="cdl ~/Github/busterc"
mkdir -p ~/Bitbucket/busterc
alias bb="cdl ~/Bitbucket"
alias bbb="cdl ~/Bitbucket/busterc"
alias dev="cd ~/Desktop && mkdir -p .dev && cdl .dev"
alias temp="cd ~/Desktop && mkdir -p .temp && cdl .temp"

# Always use color output
if ls --color > /dev/null 2>&1; then
   # GNU `ls`
	colorflag="--color"
else
   # macOS `ls`
	colorflag="-G"
fi
alias ls="command ls ${colorflag}"

# List all files colorized in long format
alias l="ls -l ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -la ${colorflag}"

# List only directories
alias lsd="ls -l ${colorflag} | grep '^d'"

# List only dotfiles
alias lds="ls -lad ${colorflag} .*"

# List only directories, including dot files
alias lsda="ls -la ${colorflag} | grep '^d'"

# Always enable colored `grep` output
alias grep="grep --color=auto"
alias fgrep="fgrep --color=auto"
alias egrep="egrep --color=auto"

# Enable aliases to be sudoâ€™ed
alias sudo="sudo "

# Tar + Gzip
alias tgz="tar -czvf"
alias utgz="tar -xzvf"

# Tar + Gzip Subdirectories
alias tgzs="find . -type d -depth 1 -exec tar -czf \"{}\".tar.gz \"{}\" \;"
alias utgzs="find . -depth 1 -name '*.tar.gz' -exec tar -xzf \"{}\" \;"
alias tgzs-clean="find . -type d -depth 1 -exec tar -czf \"{}\".tar.gz \"{}\" \; -exec rm -rf \"{}\" \;"
alias utgzs-clean="find . -depth 1 -name '*.tar.gz' -exec tar -xzf \"{}\" \; -exec rm \"{}\" \;"

# Recursively touch all files and subdirectories
alias grope="find . -exec touch {} \;"

# Run Makefiles quietly
alias makes="make -s"

# jstdin is a better node -p :)
alias js="jstdin"

# yo node + yo prettier-package-json
alias yonode="yo node && yo prettier-package-json"

# Quokka REPL
mkdir -p "$HOME/.sqratch"
alias sqratch="code $HOME/.sqratch"

# Process Search
alias psa="ps aux | grep -v 'grep' | grep "
# Process Kill Matching Name
function psakill() {
  ps aux | grep -v 'grep' | grep "$@" | awk '{print $2}' | xargs kill -9
}

# khaos tips
alias khaos-tips="curl -s https://gist.githubusercontent.com/busterc/a00b24796aa5f9ea1671f019263c721d/raw/089bc62d04574abcd71e57ddc89065565863f8d2/khaos-tips.md"

# docker tips
alias doc-tips="curl -s https://gist.githubusercontent.com/busterc/188c789c01b2aa586b194836050e3a1f/raw/b15557a191e0fef8b80256feddeb0e3b8e4322db/RethinkDB_Docker.md 2>&1 | less"

# RethinkDB migration commands with debug logging
alias rdbm-create="./create.js"
alias rdbm-dev-up="./migrate-dev.js up -l debug"
alias rdbm-dev-down="./migrate-dev.js down -l debug"
alias rdbm-pro-up="./migrate-production.js up -l debug"
alias rdbm-pro-down="./migrate-production.js down -l debug"

# xcv aliases
alias fsx="xcv x"
alias fsc="xcv c"
alias fsv="xcv v"
alias fsl="xcv l"

# VirtualBox
alias vbxl="VBoxManage list vms"
alias vbxlr="VBoxManage list runningvms"
alias vbxs="VBoxManage startvm"
alias vbx="VBoxManage startvm --type headless"
# VirtualBox PowerOff VM
function vbxo() {
  VBoxManage controlvm "$1" poweroff
}

# Touch new files in a new directory (touch + mkdir -p)
function touchy() {
  for path in $@; do
    mkdir -p "$(dirname "$path")"
    touch "$path"
  done
}

# Copy and Change Owner
function cpwn() {
  function usage() {
    cat <<EOF

  Usage: cpwn <source> <destination>

    Description: copy file and change owner

EOF
  }

  if [[ $# -eq 2 ]] && [[ -f "$1" ]]; then
    sudo cp "$1" "$2"
    sudo chown $USER:$USER "$2"
  else
    usage
  fi
}

# Copy to new directory
function cpdirp() {
  function usage() {
    cat <<EOF

  Usage: cpdirp <source> <destination>

    Description: mkdir -p the <destination> and cp -R the <source>

    Examples:

      $ find stuff
      # ==> stuff
      # ==> stuff/.dofile
      # ==> stuff/a.file
      # ==> stuff/b
      # ==> stuff/b/c.file


      ### Copy the contents of the <source> folder ###

      $ cpdirp stuff/ stuff/this # stuff/ <-- has trailing slash

      $ find stuff/this
      # ==> stuff/this
      # ==> stuff/this/.dofile
      # ==> stuff/this/a.file
      # ==> stuff/this/b
      # ==> stuff/this/b/c.file


      ### Copy the entire <source> folder ###

      $ cpdirp stuff stuff/that # stuff <-- NO trailing slash

      $ find stuff/that
      # ==> stuff/that
      # ==> stuff/that/.dofile
      # ==> stuff/that/a.file
      # ==> stuff/that/b
      # ==> stuff/that/b/c.file


      ### Copy a <source> file to folder ###

      $ cpdirp stuff/a.file stuff/what/

      $ find stuff/what
      # ==> stuff/what
      # ==> stuff/what/a.file

EOF
  }

  if [[ $# -eq 2 ]]; then
    mkdir -p "$2"
    cp -R "$1" "$2"
  else
    usage
  fi
}

# Create a new directory
alias mdp="mkdir -p"

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# Remove files and/or directories
function rmd() {
  if [[ "$1" = "." ]]; then
    # remove everything inside the CWD,
    # including dotfiles while suppressing
    # the error message for . and ..
    find . -exec rm -rf {} 2> /dev/null \;
  else
    rm -rf "$@"
  fi
}

# Erase the contents of a directory, leaving the folder
function riddir() {
  function usage() {
    cat <<EOF

  Usage: riddir <directory>

    Description:
      Remove the contents of a directory,
      leaving the directory itself in place.

EOF
  }

  if [ -z "$1" ]; then
    usage
    return 1
  fi

  if [ -d "$1" ]; then
    (
      cd "$1"
      find . -exec rm -rf {} 2> /dev/null \;
    )
  else
    cat <<EOF

    Error: Not a valid directory => "$1"

EOF
  fi

}
alias rid=riddir

# Change directory and list contents
function cdl() {
  cd "$@" && la
}

# Find files or directories (by name) with grep
function _q() {
  find . -type "$1" | grep "$2" | grep -v "$2.*/"
}

# Find files with grep
function qf() {
  _q f "$@"
}

# Find directories with grep
function qd() {
  _q d "$@"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Open Editor
function e() {
  if [[ -z "$1" ]]; then
    eval "$EDITOR" . &
  else
    eval "$EDITOR" "$1" &
  fi
}

# Open .profiles in Editor
function profiles() {
  e ~/.profiles
}

# List all environment variables that match regexp
alias envs="env | grep "

# List aliases that match regexp, e.g. $ alls .*sudo.*
function alls() {
  alias -p | grep "^alias $1" | sed "s#^alias ##" | grep $1
}

# List functions that match regexp, e.g. $ fnls .*c.*
function fnls() {
  declare -F | grep "^declare -f $1" | sed "s#^declare -f ##" | awk '{print $0 "()"}' | grep $1
}

# List functions (with source) that match regexp, e.g. $ funls .*c.*
function funls() {
  fns="$(fnls $1)"
  for fn in "$fns"; do
    _fn=$(echo "$fn" | sed "s#()##")
    declare -f $_fn
  done
}

# List functions AND aliases that match regexp, e.g. $ fnalls .*c.*
function fnalls() {
  alls "$1"
  echo
  fnls "$1"
}

# List functions (with source) AND aliases that match regexp, e.g. $ funalls .*c.*
function funalls() {
  alls "$1"
  funls "$1"
}

# ImageMagick FavIcon Generator
function favicon() {
  if [[ $# -eq 0 ]]; then
    printf "\n  Usage: favicon <image-filename>\n\n"
  else
    convert "$1" -bordercolor white -border 0 \
      \( -clone 0 -resize 16x16 \) \
      \( -clone 0 -resize 32x32 \) \
      \( -clone 0 -resize 48x48 \) \
      \( -clone 0 -resize 64x64 \) \
      -delete 0 -alpha off -colors 256 favicon.ico
  fi
}

# Generate a stubbed Bash file
function bashfile() {
  if [[ $# -eq 0 ]]; then
    printf "\n  Usage: bashfile <name>\n\n"
  else
    read -r -d '' src <<'EOF'
#!/usr/bin/env bash

function {{name}}() {

}

if [[ "${BASH_SOURCE[0]}" != "$0" ]]; then
  export -f {{name}}
else
  {{name}}
fi
EOF
  echo "$src" | sed 's#{{name}}#'$1'#g' > "$1"
  chmod +x "$1"
  e "$1"
  fi
}

# Generate a stubbed Shell file
function shfile() {
  if [[ $# -eq 0 ]]; then
    printf "\n  Usage: shfile <filename>\n\n"
  else
    read -r -d '' src <<'EOF'
#!/usr/bin/env sh

function {{name}}() {

}

if [[ "${BASH_SOURCE[0]}" != "$0" ]]; then
  export -f {{name}}
else
  {{name}}
fi
EOF
  echo "$src" | sed 's#{{name}}#'$1'#g' > "$1"
  chmod +x "$1"
  e "$1"
  fi
}

# Generate a stubbed Node Shell file
function nodefile() {
  if [[ $# -eq 0 ]]; then
    printf "\n  Usage: nodefile <filename>\n\n"
  else
    local shell
    local file
    file="$1"
    printf "#!/usr/bin/env node\n'use strict';\n// %s\n\n" "$1" > "$file"
    chmod +x "$file"
    e "$file"
  fi
}

# HR for terminal, see also: https://github.com/LuRsT/hr
function hr() {
  local COLS
  COLS="$(tput cols)"
  if (( COLS <= 0 )) ; then
    COLS="${COLUMNS:-80}"
  fi

  local WORD="$1"
  if [[ -z "$WORD" ]] ; then
    WORD="_"
  fi

  local LINE=''
  while (( ${#LINE} < COLS ))
  do
    LINE="$LINE$WORD"
  done
  echo "${LINE:0:$COLS}"
}

# Get word definitions from dict.org dictionary
function define() {
  if [[ $# -eq 0 ]]; then
    printf "\n  Usage: define <phrase>\n\n"
  else
    eval "curl 'dict://dict.org/d:$*'" | less
  fi
}

# Shellcheck with grep
function shrepcheck() {
  # $ shrepcheck <regex>
  local regex="^#!"
  # [[ -z "$@" ]] || $regex="$@"

  local fs=($(grep -lr "$regex" .))

  if [[ ${#fs[@]} -eq 0 ]]; then
    echo "  No matching files found"
  else
    for f in "${fs[@]}"; do
      shellcheck "$f"
      if [[ $? -ne 0 ]]; then
        hr
      fi
    done
  fi
}

# Node REPL with eXtras (packages & rlwrap)
function noderx() {
  dir="_noderx"
  package="package.json"

  mkdir -p "$dir"
  cd "$dir"

  [ -f "$package" ] || printf "{\"name\":\"noderx\"}" > "$package"

  for module in "$@"
  do
    npm install "$module"
  done

  if type rlwrap > /dev/null; then
    env NODE_NO_READLINE=1 rlwrap node
  else
    node
  fi

  cd - > /dev/null
}

# NGINX helper
function ngx() {
  function usage() {
    cat <<EOF

  Usage: ngx <options>

    Description: NGINX utils

    Options:

      -la            list available websites
      -le            list enabled websites
      -es <website>  enable a website
      -ds <website>  disable a website
      -ca            cd to /etc/nginx/sites-available
      -ce            cd to /etc/nginx/sites-enabled

EOF
  }

  if [[ $# -eq 0 ]]; then
    usage
  else

    local availableDir="/etc/nginx/sites-available/"
    local enabledDir="/etc/nginx/sites-enabled/"

    case "$1" in
    -la)
      ls $availableDir
      ;;
    -le)
      ls $enabledDir
      ;;
    -es)
      if [[ -f "$availableDir$2" ]]; then
        sudo ln -sfn "$availableDir$2" "$enabledDir$2"
        sudo nginx -s reload
      else
        printf "\n  Error: $2 was not found\n\n"
      fi
      ;;
    -ds)
      if [[ -f "$enabledDir$2" ]]; then
        sudo rm "$enabledDir$2"
        sudo nginx -s reload
      else
        printf "\n  Error: $2 was not found\n\n"
      fi
      ;;
    -ca)
      cd $availableDir
      ;;
    -ce)
      cd $enabledDir
      ;;
    *)
      usage
      ;;
    esac
  fi
}
alias ngxla="ngx -la"
alias ngxle="ngx -le"
alias ngxes="ngx -es"
alias ngxds="ngx -ds"
alias ngxca="ngx -ca"
alias ngxce="ngx -ce"

# List executables in CWD + /node_modules/.bin
function nomos() {
  echo
  ls $(npm bin) | sed "s#.*#=>  &#"
  echo
}

function nomo() {
  if [[ $# -eq 0 ]]; then
    cat <<EOF

  Usage: nomo <command>

    Description: execute bins from ./node_modules/.bin

EOF
  else
    local bin=$(npm bin)
    "$bin/$@"
  fi
}

# Move CWD into a new/existing subdirectory
function bury() {
  if [[ $# -eq 0 ]]; then
    cat <<EOF

  Usage: bury <subdirectory>

    Description: put contents of CWD into a new or existing subdirectory

EOF
  else
    mkdir -p "$1"
    (
      shopt -s dotglob
      for file in *;
      do
        local target=$(echo $1 | cut -d "/" -f1)
        if [[ "$file" != "$target" ]]; then
          # echo "==> $file"
          mv "$file" "$1"
        fi
      done
    )
  fi
}

# CLI for JS `encodeURIComponent` handy for quick svg conversions
function encodeURI() {
  if [[ $# -eq 0 ]]; then
    cat <<'EOF'

  Usage: encodeURI <string>

  Example: $ encodeURI "$(cat logo.svg)" | pbcopy

EOF
  else
    local fn
    if echo "$1" | grep "\"" >/dev/null && echo "$1" | grep "'" > /dev/null; then
      echo "Error: string contains both single and double quotes."
      return 1
    elif echo "$1" | grep "\'" >/dev/null; then
      fn="encodeURIComponent(\"$1\")"
    else
      fn="encodeURIComponent('$1')"
    fi
    node -p "$fn"
  fi
}

# CLI for JS `decodeURIComponent` handy for quick svg conversions
function decodeURI() {
  if [[ $# -eq 0 ]]; then
    cat <<'EOF'

  Usage: decodeURI <string>

  Example: $ decodeURI "%3Csvg%3E%3C%2Fsvg%3E" | pbcopy"

EOF
  else
    local fn
    if echo "$1" | grep "\"" >/dev/null && echo "$1" | grep "'" > /dev/null; then
      echo "Error: string contains both single and double quotes."
      return 1
    elif echo "$1" | grep "\'" >/dev/null; then
      fn="decodeURIComponent(\"$1\")"
    else
      fn="decodeURIComponent('$1')"
    fi
    node -p "$fn"
  fi
}

function base64() {
  if [[ $# -eq 0 ]]; then
    cat <<'EOF'

  Usage: base64 <string>

  Example: $ base64 "$(cat logo.svg)" | pbcopy"

EOF
  else
    node -p "new Buffer('$1').toString('base64')"
  fi
}

function unbase64() {
  if [[ $# -eq 0 ]]; then
    cat <<'EOF'

  Usage: unbase64 <string>

  Example: $ unbase64 "PHN2Zz48L3N2Zz4=" | pbcopy"

EOF
  else
    node -p "new Buffer('$1', 'base64').toString('utf8')"
  fi
}

# defaults for `iconr` and fix classname preprending
alias iconz="iconr . . -avNnokSd -c=i.icon.icon- | sed 's#\.i\.icon\.#i\.icon\.#g' > _iconz.css"

# add color to svgs
function fill-svg() {
  if [[ $# -lt 3 ]] || [[ $1 == *".svg" ]] || [[ $2 == *".svg" ]]; then
    cat <<'EOF'

    Usage: fill-svg <color-name> <color> <svg-file>...

    Description: adds `fill="color"` to svg `<path>` element and saves
    the new file(s) in ./filled/<color-name>/*

    Options:

      <color-name>  a user friendly name that gets applied to each filename
      <color>       the actual color to apply; rgb(), hex or html color-name
      <svg-file>    the source files

    Examples:

      $ fill-svg burnt-orange "#bf5700" *.svg

      $ fill-svg orange orange *.svg

EOF
  else
    local colorname="$1"
    shift
    local color="$1"
    shift

    local dest="./filled/$colorname"
    mkdir -p "$dest"

    for file in $@; do
      outfile="$(echo $file | sed s#\.svg#\-$colorname\.svg#)"
      cat $file | sed 's/\<path/\<path fill="'$color'"/' > "$dest/$outfile"
      echo "$dest/$outfile"
    done
  fi
}

# FontAwesome to SVG (font glyphs to individual svg files)
function fa2svg() {
  git clone https://github.com/fortawesome/font-awesome
  mkdir -p ./fontawesome-svg/
  svg-caster --svg-font ./font-awesome/fonts/fontawesome-webfont.svg --svg-font-css ./font-awesome/css/font-awesome.css --out-svg ./fontawesome-svg/
  rm -rf ./font-awesome/
}

# simple stopwatch with laps
function stopwatch() {
  local n=0
  local t=0
  local continuing="true"
  local lap=1
  local key="~"
  local pausing="~"

  cat <<EOF

  * type "p" to pause and "r" to resume
  * hit the spacebar to start a new lap
    * if paused you will resume with a new lap
  * type "q" or "x" or Ctrl-c to stop

EOF

  function summary() {
    continuing="false" # break the while loop
    local elapsed=$(($t-$lap+1))
    printf "\r\033[0KLap ${lap}: $n seconds\n"
    printf "\nTotal Elapsed: $elapsed seconds\n"
  }

  trap "summary" SIGINT

  while [[ $continuing = "true" ]]; do
    key="~"
    pausing="~"
    printf "\r\033[0KLap ${lap}: $n seconds"
    read -s -t 1 -n 1 key

    case "$key" in
      "")
        printf "\r\033[0KLap ${lap}: $n seconds\n"
        key=""
        n=-1
        ((lap++))
        ;;
      q|x)
        summary
        break
        ;;
      p)
        function paused() {
          read -s -n 1 pausing
          case "$pausing" in
            "")
              printf "\r\033[0KLap ${lap}: $n seconds\n"
              key=""
              n=-1
              ((lap++))
              ;;
            q|x)
              summary
              break
              ;;
            r)
              : # noop
              ;;
            *)
              paused
              ;;
          esac
        }
        paused
        ;;
    esac
    ((t++))
    ((n++))
  done
}

# simple countdown timer
function timer() {
  if [[ $1 -lt 1 ]]; then
    cat <<EOF

  Usage: timer <seconds>

EOF
    return 1
  fi

  local n="$1"
  while [[ $n -gt 0 ]]; do
    printf "\r\033[0K==> $n"
    sleep 1
    ((n--))
  done
  printf "\r\a"
}

# Tree with dotfiles; use $TREEZ_IGNORE for filtering
## ingore defaults
export TREEZ_IGNORE=".git|node_modules"
function treez() {
  tree -a -I "$TREEZ_IGNORE" "$@" | less
}

# Microgen Template Directory Shortcut
export MICROGEN_TEMP_DIR=$HOME/Bitbucket/busterc/cc

# Use microgen on a directory of files
function macrogen() {
  function usage() {
    cat <<'EOF'

  Usage: macrogen <source-directory>

  Description: run microgen on a directory of files

  - By default, files are written to $PWD
    - nested files will adhere to the <source-directory> hierarchy

  - For each file in the <source-directory> you will be prompted to:
    - hit enter to begin generating, using the default file name
      or
    - type a new destination for the generated file
      or
    - type "-" to ignore the file and NOT generate it

EOF
  }

  if [[ $# -ne 1 ]]; then
    usage
    return
  fi

  for file in $(find "$@" -type f); do
    fromdir="${*%/}"
    workdir=$(dirname "$file")
    outdir="${workdir/$fromdir}"
    outdir=${outdir/\/\/}
    workfile=$(basename "$file" ".hbs")
    outfile="$outdir/$workfile"
    outfile=$(echo "$outfile" | sed 's#^\/##')

    echo ""
    read -e -p "($outfile) " custom_outfile

    if [[ "$custom_outfile" == "-" ]]; then
      continue
    fi

    if [[ -n "$custom_outfile" ]]; then
      outfile="$custom_outfile"
    fi

    microgen "$file" "$outfile"
  done
}

# find a file in the first possible parent dir
function find_up() {
  (
    while [[ "$PWD" != "/" ]]; do
      find "$PWD/$@" -maxdepth 1 2>/dev/null && return || cd ..
    done
    (>&2 echo ":( not found: $@")
    return 1
  )
}

# Quick Look at package.json
function pj() {
  for key in "$@"; do
    find_up package.json && find_up package.json | xargs cat | jstdin "x=>x$key"
  done
}
alias pj-all="pj \";\""
alias pjd="pj .dependencies"
alias pjdd="pj .devDependencies"
alias pjddd="pj .dependencies .devDependencies"
alias pjs="pj .scripts"
alias pjv="pj .version"

# Get absolute path to dir or file
function abs() {
  echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

# Select modified files to git-diff
function gtds() {
  PS3="
Select File to Diff or Quit: "
  files=($(git status --porcelain | awk 'match($1, "M"){print $2}'))

  [[ "${#files[@]}" -eq 0 ]] && echo "No files have been modified" && return 0

  files+=("Quit")
  echo
  select file in "${files[@]}"; do
    case "$file" in
      "Quit")
        break
        ;;
      *)
        if [[ "$REPLY" =~ ^[0-9]+$ ]]; then
          git diff "$file"
        else
          echo "You've choosen poorly.. try using only numbers :P"
        fi
        break
        ;;
    esac
  done
}

function scrape() {
  function usage() {
    cat <<EOF

  Usage: scrape <url>

  Description: scrape a site recursively, using wget

EOF
  }

  if [[ $# -ne 1 ]]; then
    usage
    return
  fi

  wget -r "$@"

  # Remove query strings from file names
  for file in $(find . -name '*\?*'); do
    mv "$file" "${file%%\?*}";
  done
}
